---
name: "Deploy pipeline (Terraform and App)"

# on:
#   push:
#     branches:
#       - main

on:
  pull_request:
    branches:
      - main

jobs:
  terraform-deploy:
    name: "Terraform Infrastructure"
    runs-on: ubuntu-latest
    env:
      # Credentials for deployment to CIVO
      TF_VAR_civo_token: ${{ secrets.TF_VAR_CIVO_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      TF_VAR_flux_github_token: ${{ secrets.TF_VAR_FLUX_GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the infra directory.
        working-directory: ./infra

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        id: init
        run: terraform init -upgrade

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: ./infra/kubeconfig

  Build-Push-Deploy:
    # Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=TIMESTAMP::$(date +%Y%m%d%H%M%S)"

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            dcristobal/pokemon-app:latest
            dcristobal/pokemon-app:${{ steps.timestamp.outputs.TIMESTAMP }}
      # Deploy applications to staging and production
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig

      - name: Create kubeconfig directory
        run: mkdir -p ~/.kube

      - name: Move kubeconfig to default location
        run: mv kubeconfig ~/.kube/config

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          wget https://github.com/helmfile/helmfile/releases/download/v0.159.0/helmfile_0.159.0_linux_amd64.tar.gz
          tar -xxf helmfile_0.159.0_linux_amd64.tar.gz
          rm helmfile_0.159.0_linux_amd64.tar.gz
          mv helmfile /usr/local/bin/

      - name: Deploy pokemon app to staging
        env:
          environment: "staging"
        run: |
          cd helmfile && helmfile -e ${environment} sync
      - name: manual-approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: dcristobalhMad
          minimum-approvals: 1
          issue-title: "Deploy to production"
          issue-body: "Please approve in the comments to deploy to production"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ""
          additional-denied-words: ""

      - name: Deploy pokemon app to production
        env:
          environment: "production"
        run: |
          cd helmfile && helmfile -e ${environment} sync
